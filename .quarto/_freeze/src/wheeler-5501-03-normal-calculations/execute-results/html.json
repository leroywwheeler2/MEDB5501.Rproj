{
  "hash": "4a288fd78539b584624e11d07fae2b1d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Normal probabilities and quantiles\"\nformat: \n  revealjs:\n    slide-number: true\n    embed-resources: true\neditor: source\nexecute: \n  error: true\n---\n\n\nThis program displays the standard normal curve along with various probabilities and quantiles. It was written by Steve Simon and Leroy Wheeler on 2024-09-04 and is placed in the public domain.\n\n## Load the tidyverse library\n\n\n::: {.cell}\n\n:::\n\n\n## Using R to draw the standard normal curve\n\nuse seq to calculate 100 evenly spaced values between -4 and +4 and dnorm to compute the bell curve at each point. Use geom_polygon to paint the area surrounded by the bell curve.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](wheeler-5501-03-normal-calculations_files/figure-revealjs/standard-normal-1.png){width=960}\n:::\n:::\n\n\n## P[-1 < Z < 1]\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](wheeler-5501-03-normal-calculations_files/figure-revealjs/homework-1-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6826895\n```\n\n\n:::\n:::\n\nThere is a 68% percent chance of getting values between 1 and -1 in the above standard normal distribution curve.\n\n\n## 60th percentile of a standard normal\n\nUse qnorm to calculate quantiles of the standard normal distribution.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](wheeler-5501-03-normal-calculations_files/figure-revealjs/quantile homework-2-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2533471\n```\n\n\n:::\n:::\n\nThe value of 0.25 on a standard normal distribution curve is the 60th percentile.  This means that there is a 60% probability of getting values less than 0.25 and 40% probability of getting values greater than 0.25.",
    "supporting": [
      "wheeler-5501-03-normal-calculations_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}